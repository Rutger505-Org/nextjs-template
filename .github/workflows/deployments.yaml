name: Deployments

on:
  push:
    tags:
      - "*"
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - "*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_NAME: next-template
  IMAGE_REPOSITORY: rutger505/next-template

jobs:
  configure:
    name: Generate Configuration
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      namespace: ${{ steps.config.outputs.namespace }}
      is_production: ${{ steps.config.outputs.is_production }}
      image: ${{ steps.config.outputs.image }}
      hostname: ${{ steps.config.outputs.hostname }}
      letsencrypt_env: ${{ steps.config.outputs.letsencrypt_env }}

    steps:
      - name: Generate configuration
        id: config
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            IS_PRODUCTION="true"
            TAG=$GITHUB_REF_NAME
            ENVIRONMENT="production"
            INGRESS_HOST=${{ vars.BASE_DOMAIN }}
            LETSENCRYPT_ENV="production"
          else
            IS_PRODUCTION="false"
            TAG=$GITHUB_SHA
            ENVIRONMENT="pr-${{ github.event.pull_request.number }}"
            HOSTNAME=${{ github.sha }}.${{ vars.BASE_DOMAIN }}
            LETSENCRYPT_ENV="staging"
          fi

          NAMESPACE=${{ env.APP_NAME }}-$ENVIRONMENT

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
          echo "is_production=$IS_PRODUCTION" >> $GITHUB_OUTPUT
          echo "image=$IMAGE_REPOSITORY:$TAG" >> $GITHUB_OUTPUT
          echo "hostname=$HOSTNAME" >> $GITHUB_OUTPUT
          echo "letsencrypt_env=$LETSENCRYPT_ENV" >> $GITHUB_OUTPUT

          echo "Generated configuration:"
          echo $GITHUB_OUTPUT

  build-docker-image:
    if: github.event.action != 'closed'
    name: Build Docker image
    needs: [configure]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ needs.configure.outputs.image }}
          cache-from: type=registry,ref=${{ env.IMAGE_REPOSITORY }}:cache
          cache-to: type=registry,ref=${{ env.IMAGE_REPOSITORY }}:cache,mode=max

  deploy-to-kubernetes:
    if: github.event.action != 'closed'
    name: Deploy to Kubernetes
    needs: [configure, build-docker-image]
    runs-on: ubuntu-latest

    environment:
      name: ${{ needs.configure.outputs.environment }}
      url: https://${{ needs.configure.outputs.hostname }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Kubernetes
        uses: ./.github/actions/setup-k8s
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: OpenTofu Apply
        working-directory: ./deploy
        env:
          TF_VAR_image: ${{ needs.configure.outputs.image }}
          TF_VAR_hostname: ${{ needs.configure.outputs.hostname }}
          TF_VAR_certificate_issuer: ${{ needs.configure.outputs.letsencrypt_env }}
        run: |
          tofu init
          tofu plan -out=tfplan -var-file="1-dummy-values.tfvars" -var-file="0-values.tfvars" -input=false 
          tofu apply -var-file="0-values.tfvars" -input=false -auto-approve tfplan

  cleanup-environment:
    if: github.event.action == 'closed' && needs.configure.outputs.is_production == 'false'
    name: Delete PR Environment
    needs: [configure]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.configure.outputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Kubernetes
        uses: ./.github/actions/setup-k8s
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: OpenTofu Destroy
        working-directory: ./deploy
        run: |
          tofu init
          tofu plan -destroy -out=tfplan -var-file="1-dummy-values.tfvars" -var-file="0-values.tfvars" -input=false 
          tofu apply -var-file="1-dummy-values.tfvars" -var-file="0-values.tfvars" -input=false -auto-approve tfplan
