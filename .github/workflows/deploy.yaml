name: Deploy

on:
  push:
    tags:
      - "*"
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - "*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_NAME: next-template
  DOCKER_IMAGE: rutger505/next-template

jobs:
  build-docker-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.config.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate build config
        id: config
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi

          echo "Setting tag to $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ steps.config.outputs.tag }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:cache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:cache,mode=max

  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs:
      - build-docker-image

    strategy:
      matrix:
        environment:
          - ${{ startsWith(github.ref, 'refs/tags/') && 'production' || format('pr-{0}', github.event.pull_request.number) }}

    environment:
      name: ${{ matrix.environment }}
      url: https://${{ steps.config.outputs.ingress_host }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate deployment config
        id: config
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            INGRESS_HOST=${{ vars.BASE_DOMAIN }}
            LETSENCRYPT_ENV="production"
          else
            INGRESS_HOST=${{ github.sha }}.${{ vars.BASE_DOMAIN }}
            LETSENCRYPT_ENV="staging"
          fi

          echo "Setting ingress host to $INGRESS_HOST"
          echo "ingress_host=$INGRESS_HOST" >> $GITHUB_OUTPUT

          echo "Setting letsencrypt_env to $LETSENCRYPT_ENV"
          echo "letsencrypt_env=$LETSENCRYPT_ENV" >> $GITHUB_OUTPUT

          NAMESPACE=$APP_NAME-${{ matrix.environment }}
          echo "Setting namespace to $NAMESPACE"
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT

      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig
          chmod 600 kubeconfig

      - name: Set up Kubernetes context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ./kubeconfig

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: "1.9.0"

      - name: OpenTofu Apply
        working-directory: ./deploy
        env:
          TF_VAR_app_name: ${{ env.APP_NAME }}
          TF_VAR_namespace: ${{ steps.config.outputs.namespace }}
          TF_VAR_image_repository: ${{ env.DOCKER_IMAGE }}
          TF_VAR_image_tag: ${{ needs.build-docker-image.outputs.tag }}
          TF_VAR_ingress_host: ${{ steps.config.outputs.ingress_host }}
          TF_VAR_certificate_cluster_issuer: letsencrypt-${{ steps.config.outputs.letsencrypt_env }}
        run: |
          tofu init
          tofu plan -out=tfplan
          tofu apply -auto-approve tfplan

      - name: Cleanup
        if: always()
        run: rm -f kubeconfig
